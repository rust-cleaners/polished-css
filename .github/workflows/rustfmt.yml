# yaml-language-server: $schema=https://json.schemastore.org/github-workflow
---
name: rustfmt

on:
    workflow_call:
        inputs:
            flags:
                description: Args (flags) to pass after `cargo fmt` command
                type: string
                required: false
                default: --check --verbose
            toolchain:
                description: Rust toolchain to use
                type: string
                required: false
                default: nightly
            working-directory:
                description: working directory where to execute `cargo fmt`
                type: string
                required: false
                default: .

    workflow_dispatch:

defaults:
    run:
        shell: bash

env:
    CI: true
    CARGO_TERM_COLOR: always

permissions:
    pull-requests: write

jobs:
    rustfmt:
        name: rustfmt
        outputs:
            status: ${{ steps.failure.outputs.status || steps.success.outputs.status }}
        runs-on: ubuntu-latest
        timeout-minutes: 3
        steps:
            - name: Checkout to the repository
              # https://github.com/actions/checkout
              uses: actions/checkout@v4

            - name: Setup Rust
              # https://github.com/dtolnay/rust-toolchain
              uses: dtolnay/rust-toolchain@v1
              with:
                  components: rustfmt
                  toolchain: nightly

            - name: Setup the cache
              # https://github.com/Swatinem/rust-cache
              uses: Swatinem/rust-cache@v2

            - name: Check Rust codebase format with rustfmt
              # https://github.com/LoliGothick/rustfmt-check
              uses: LoliGothick/rustfmt-check@v0.4.1
              id: lint_rustfmt
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  args: ${{ inputs.flags }}
                  toolchain: ${{ inputs.toolchain }}
                  working-directory: ${{ inputs.working-directory }}

            - run: echo "status=failure" >> $GITHUB_OUTPUT
              id: failure
              if: failure()
            - run: echo "status=success" >> $GITHUB_OUTPUT
              id: success
              if: success()

    error-comment:
        uses: ./.github/workflows/error-comment.yml
        needs: [rustfmt]
        if: always()
        with:
            step_status: ${{ needs.rustfmt.outputs.status }}
            header: lint-rustfmt-error
            message: |
                ## ‚ùå **rustfmt**

                **There are some format/styling issues found in the Rust codebase!**

                You can preview the annotations in [Files changed] tab.

                [Files changed]: https://github.com/rust-cleaners/polished-css/pull/${{ github.event.pull_request.number }}/files

                ---

                You can quickly fix the issues with the command _(via `cargo-make` task)_:

                ```sh
                makers format-fix
                ```
